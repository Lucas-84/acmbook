#include <bits/stdc++.h>
using namespace std;
#define mp make_pair
#define pb push_back
#define fst first
#define snd second
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
const ll LLINF = (1ull << 53) - 1;
const int INF = 1000 * 1000 * 1000;

// Fonction prefixe : s[0 .. n-1] -> pref[0 .. n-1]
// pref[i] = max(0 <= k <= i | s[0 .. k-1] = s[i-k+1 .. i])
// O(n)
// Applications :
// - Trouver toutes les occurrences d'un motif (KMP)
// - Compter le nombre d'occurrences de chaque prefixe de s dans s
// - Nombre de sous-chaines distincstes dans s
// - Factorisation
vector<int> compute_prefix(string s) {
  int n = (int)s.length();
  vector<int> pref(n);
  for (int i = 1; i < n; ++i) {
    int j = pref[i - 1];
    while (j > 0 && s[i] != s[j])
      j = pref[j - 1];
    if (s[i] == s[j])
      ++j;
    pref[i] = j;
  }
  return pref;
}

const int MAXN = 1000;
char needle[MAXN];

int main() {
  while (scanf("%*d %s ", needle) == 1) {
    int n = (int)strlen(needle);
    vector<int> pref = compute_prefix(needle);
    char c;
    int i = 0;
    int pos = 0;
    while (scanf("%c", &c) == 1 && c != '\n') {
      while (i > 0 && c != needle[i])
        i = pref[i - 1];
      if (c == needle[i])
        ++i;
      if (i == n) 
        printf("%d\n", pos - n + 1);
      ++pos;
    }
    puts("");
  }
  return 0;
}
